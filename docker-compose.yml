version: '3.8'

services:
  proxy:
    build:
      context: ./infrastructure/docker
      dockerfile: proxy/Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
      - backend
    networks:
      - frontend
      - backend
    volumes:
      - ./infrastructure/docker/proxy/ssl:/etc/nginx/ssl:ro
      - ./infrastructure/docker/proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health", "||", "exit", "1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
    restart: unless-stopped
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80

  web:
    build:
      context: .
      dockerfile: infrastructure/docker/web/Dockerfile
    volumes:
      - ./src/web:/app:delegated
      - node_modules_web:/app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_BASE_URL=http://localhost/api
      - API_URL=http://backend:3000
      - NEXTAUTH_URL=http://localhost
      - NEXTAUTH_SECRET=development_secret_key
      - NEXT_PUBLIC_APP_NAME=HCBS Revenue Management System
      - NEXT_PUBLIC_ENVIRONMENT=development
      - NEXT_PUBLIC_ENABLE_MFA=true
      - NEXT_PUBLIC_SESSION_TIMEOUT=15
      - NEXT_PUBLIC_ENABLE_HIPAA_COMPLIANCE=true
    networks:
      - backend
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health", "||", "exit", "1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  backend:
    build:
      context: .
      dockerfile: infrastructure/docker/backend/Dockerfile
    volumes:
      - ./src/backend:/app:delegated
      - node_modules_backend:/app/node_modules
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=hcbs_revenue
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=development_jwt_secret
      - JWT_ALGORITHM=RS256
      - ACCESS_TOKEN_EXPIRATION=900
      - REFRESH_TOKEN_EXPIRATION=604800
      - CORS_ORIGIN=http://localhost
      - API_BASE_URL=http://localhost/api
      - FRONTEND_URL=http://localhost
      - LOG_LEVEL=debug
    networks:
      - backend
      - database
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health/live", "||", "exit", "1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  db:
    image: postgres:15.3-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=hcbs_revenue
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    networks:
      - database
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  redis:
    image: redis:7.0-alpine
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    networks:
      - database
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  node_modules_web:
    driver: local
  node_modules_backend:
    driver: local

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  database:
    driver: bridge