name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
        default: 'development'
      version:
        description: "Version to deploy (tag, commit, or 'latest')"
        required: true
        default: 'latest'
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'infrastructure/**'
      - '.github/workflows/deploy.yml'

concurrency:
  group: "deploy-${{ github.event.inputs.environment || 'development' }}"
  cancel-in-progress: false

env:
  NODE_VERSION: '18.16.0'
  POSTGRES_VERSION: '15.3'
  REDIS_VERSION: '7.0'
  NEXT_TELEMETRY_DISABLED: '1'

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      version: ${{ steps.set-version.outputs.version }}
      deploy_id: ${{ steps.create-deployment.outputs.deployment_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set environment
        id: set-env
        run: echo "environment=${{ github.event.inputs.environment || 'development' }}" >> $GITHUB_OUTPUT
      
      - name: Set version
        id: set-version
        run: echo "version=${{ github.event.inputs.version || github.sha }}" >> $GITHUB_OUTPUT
      
      - name: Create GitHub deployment
        id: create-deployment
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: '${{ steps.set-version.outputs.version }}',
              environment: '${{ steps.set-env.outputs.environment }}',
              auto_merge: false,
              required_contexts: [],
              description: 'Deployment to ${{ steps.set-env.outputs.environment }}'
            });
            core.setOutput('deployment_id', data.id);

  build-backend:
    name: Build Backend Image
    runs-on: ubuntu-latest
    needs: [prepare]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: infrastructure/docker/backend/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/hcbs-backend:${{ needs.prepare.outputs.version }},${{ steps.login-ecr.outputs.registry }}/hcbs-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-web:
    name: Build Web Image
    runs-on: ubuntu-latest
    needs: [prepare]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build and push web image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: infrastructure/docker/web/Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/hcbs-web:${{ needs.prepare.outputs.version }},${{ steps.login-ecr.outputs.registry }}/hcbs-web:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [prepare, build-backend, build-web]
    if: "needs.prepare.outputs.environment == 'development' || github.event_name == 'push'"
    environment:
      name: development
      url: https://dev.thinkcaring.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.3'
      
      - name: Update deployment status (in_progress)
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.prepare.outputs.deploy_id }},
              state: 'in_progress',
              description: 'Deploying to development environment'
            });
      
      - name: Deploy to development
        run: bash infrastructure/scripts/deploy.sh --environment development --version ${{ needs.prepare.outputs.version }} --region ${{ secrets.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          KUBECONFIG: /tmp/kubeconfig
      
      - name: Run smoke tests
        run: bash infrastructure/scripts/smoke-tests.sh --environment development
        env:
          KUBECONFIG: /tmp/kubeconfig
      
      - name: Update deployment status (success)
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.prepare.outputs.deploy_id }},
              state: 'success',
              environment_url: 'https://dev.thinkcaring.com',
              description: 'Deployment to development successful'
            });
      
      - name: Update deployment status (failure)
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.prepare.outputs.deploy_id }},
              state: 'failure',
              description: 'Deployment to development failed'
            });
      
      - name: Notify Slack on success
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "✅ Successfully deployed to development environment\nVersion: ${{ needs.prepare.outputs.version }}\nURL: https://dev.thinkcaring.com"
            }
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      
      - name: Notify Slack on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "❌ Failed to deploy to development environment\nVersion: ${{ needs.prepare.outputs.version }}\nSee: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [prepare, build-backend, build-web]
    if: "needs.prepare.outputs.environment == 'staging'"
    environment:
      name: staging
      url: https://staging.thinkcaring.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.3'
      
      - name: Update deployment status (in_progress)
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.prepare.outputs.deploy_id }},
              state: 'in_progress',
              description: 'Deploying to staging environment'
            });
      
      - name: Deploy to staging
        run: bash infrastructure/scripts/deploy.sh --environment staging --version ${{ needs.prepare.outputs.version }} --region ${{ secrets.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          KUBECONFIG: /tmp/kubeconfig
      
      - name: Run smoke tests
        run: bash infrastructure/scripts/smoke-tests.sh --environment staging
        env:
          KUBECONFIG: /tmp/kubeconfig
      
      - name: Update deployment status (success)
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.prepare.outputs.deploy_id }},
              state: 'success',
              environment_url: 'https://staging.thinkcaring.com',
              description: 'Deployment to staging successful'
            });
      
      - name: Update deployment status (failure)
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.prepare.outputs.deploy_id }},
              state: 'failure',
              description: 'Deployment to staging failed'
            });
      
      - name: Notify Slack on success
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "✅ Successfully deployed to staging environment\nVersion: ${{ needs.prepare.outputs.version }}\nURL: https://staging.thinkcaring.com"
            }
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      
      - name: Notify Slack on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "❌ Failed to deploy to staging environment\nVersion: ${{ needs.prepare.outputs.version }}\nSee: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [prepare, build-backend, build-web]
    if: "needs.prepare.outputs.environment == 'production'"
    environment:
      name: production
      url: https://thinkcaring.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.27.3'
      
      - name: Update deployment status (in_progress)
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.prepare.outputs.deploy_id }},
              state: 'in_progress',
              description: 'Deploying to production environment'
            });
      
      - name: Deploy to production
        run: bash infrastructure/scripts/deploy.sh --environment production --version ${{ needs.prepare.outputs.version }} --region ${{ secrets.AWS_REGION }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          KUBECONFIG: /tmp/kubeconfig
      
      - name: Run smoke tests
        run: bash infrastructure/scripts/smoke-tests.sh --environment production
        env:
          KUBECONFIG: /tmp/kubeconfig
      
      - name: Update deployment status (success)
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.prepare.outputs.deploy_id }},
              state: 'success',
              environment_url: 'https://thinkcaring.com',
              description: 'Deployment to production successful'
            });
      
      - name: Update deployment status (failure)
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ needs.prepare.outputs.deploy_id }},
              state: 'failure',
              description: 'Deployment to production failed'
            });
      
      - name: Create release tag
        if: success()
        run: git tag -a "release-${{ needs.prepare.outputs.version }}" -m "Production release ${{ needs.prepare.outputs.version }}" && git push origin "release-${{ needs.prepare.outputs.version }}"
      
      - name: Notify Slack on success
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "✅ Successfully deployed to production environment\nVersion: ${{ needs.prepare.outputs.version }}\nURL: https://thinkcaring.com"
            }
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      
      - name: Notify Slack on failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "❌ Failed to deploy to production environment\nVersion: ${{ needs.prepare.outputs.version }}\nSee: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
          channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}